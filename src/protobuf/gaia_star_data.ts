// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "gaia_star_data.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Star
 */
export interface Star {
    /**
     * @generated from protobuf field: int64 source_id = 1;
     */
    sourceId: bigint;
    /**
     * @generated from protobuf field: float x = 2;
     */
    x: number;
    /**
     * @generated from protobuf field: float y = 3;
     */
    y: number;
    /**
     * @generated from protobuf field: float z = 4;
     */
    z: number;
    /**
     * @generated from protobuf field: float phot_g_mean_mag = 5;
     */
    photGMeanMag: number;
    /**
     * @generated from protobuf field: float absolute_magnitude = 6;
     */
    absoluteMagnitude: number;
    /**
     * @generated from protobuf field: float hue = 7;
     */
    hue: number;
}
/**
 * @generated from protobuf message StarCollection
 */
export interface StarCollection {
    /**
     * @generated from protobuf field: repeated Star stars = 1;
     */
    stars: Star[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Star$Type extends MessageType<Star> {
    constructor() {
        super("Star", [
            { no: 1, name: "source_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "x", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "y", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "z", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "phot_g_mean_mag", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "absolute_magnitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "hue", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Star>): Star {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sourceId = 0n;
        message.x = 0;
        message.y = 0;
        message.z = 0;
        message.photGMeanMag = 0;
        message.absoluteMagnitude = 0;
        message.hue = 0;
        if (value !== undefined)
            reflectionMergePartial<Star>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Star): Star {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 source_id */ 1:
                    message.sourceId = reader.int64().toBigInt();
                    break;
                case /* float x */ 2:
                    message.x = reader.float();
                    break;
                case /* float y */ 3:
                    message.y = reader.float();
                    break;
                case /* float z */ 4:
                    message.z = reader.float();
                    break;
                case /* float phot_g_mean_mag */ 5:
                    message.photGMeanMag = reader.float();
                    break;
                case /* float absolute_magnitude */ 6:
                    message.absoluteMagnitude = reader.float();
                    break;
                case /* float hue */ 7:
                    message.hue = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Star, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 source_id = 1; */
        if (message.sourceId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.sourceId);
        /* float x = 2; */
        if (message.x !== 0)
            writer.tag(2, WireType.Bit32).float(message.x);
        /* float y = 3; */
        if (message.y !== 0)
            writer.tag(3, WireType.Bit32).float(message.y);
        /* float z = 4; */
        if (message.z !== 0)
            writer.tag(4, WireType.Bit32).float(message.z);
        /* float phot_g_mean_mag = 5; */
        if (message.photGMeanMag !== 0)
            writer.tag(5, WireType.Bit32).float(message.photGMeanMag);
        /* float absolute_magnitude = 6; */
        if (message.absoluteMagnitude !== 0)
            writer.tag(6, WireType.Bit32).float(message.absoluteMagnitude);
        /* float hue = 7; */
        if (message.hue !== 0)
            writer.tag(7, WireType.Bit32).float(message.hue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Star
 */
export const Star = new Star$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StarCollection$Type extends MessageType<StarCollection> {
    constructor() {
        super("StarCollection", [
            { no: 1, name: "stars", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Star }
        ]);
    }
    create(value?: PartialMessage<StarCollection>): StarCollection {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stars = [];
        if (value !== undefined)
            reflectionMergePartial<StarCollection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StarCollection): StarCollection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Star stars */ 1:
                    message.stars.push(Star.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StarCollection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Star stars = 1; */
        for (let i = 0; i < message.stars.length; i++)
            Star.internalBinaryWrite(message.stars[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StarCollection
 */
export const StarCollection = new StarCollection$Type();
